PROBLEM STATEMENT
Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example 1:

Input: 1->2->3->4->5->NULL
Output: 1->3->5->2->4->NULL
Example 2:

Input: 2->1->3->5->6->4->7->NULL
Output: 2->3->6->7->1->5->4->NULL
Note:

The relative order inside both the even and odd groups should remain as it was in the input.
The first node is considered odd, the second node even and so on ...


soln:

def oddEvenList(self, head: ListNode) -> ListNode:
        odds = ListNode(0)
        evens = ListNode(0)
        
        oddHead = odds
        evenHead = evens
        
        length = 1
        
        while head:
            if length % 2 == 0:
                evens.next = head
                evens = evens.next
            else:
                odds.next = head
                odds = odds.next
            
            length += 1
            head = head.next
        
        # need to cut the end of the lists
        odds.next = None
        evens.next = None
        
        if odds:
            odds.next = evenHead.next
            return oddHead.next
        else:
            return evenHead.next
