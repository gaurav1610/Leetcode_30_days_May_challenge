PROBLEM STATEMENT
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


SOLN:
def findAnagrams(self, s: str, p: str) -> List[int]:
        ans=[]
        if len(s) < len(p):
            return []
        if len(s) == 0:
            return []
        l = [0 for i in range(26)]
        m = [0 for i in range(26)]
        for i in p:
             l[ord(i)-97]+=1
        for j in range(len(p)):
             m[ord(s[j]) - 97] += 1
        if l == m:
             ans.append(0)
        for j in range(len(p),len(s)):
            m[ord(s[j])-97] += 1
            m[ord(s[j-len(p)])-97] -=1
            if l == m :
                ans.append(j-len(p)+1)
        return ans
