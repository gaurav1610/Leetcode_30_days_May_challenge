PROBLEM STATEMENT
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Note:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

soln
def checkInclusion(self, s1: str, s2: str) -> bool:
        n1, n2 = len(s1), len(s2)
        if not n1:
            return True
        if n1 > n2:
            return False
        
        offset = ord('a')
        s1_counts = [0]*26
        s2_counts = [0]*26
        for i in range(n1):
            s1_counts[ord(s1[i]) - offset] += 1
            s2_counts[ord(s2[i]) - offset] += 1

        for i in range(n2 - n1):
            if s1_counts == s2_counts:
                return True
            
            s2_counts[ord(s2[i + n1]) - offset] += 1
            s2_counts[ord(s2[i]) - offset] -= 1
            
            
        return s1_counts == s2_counts
